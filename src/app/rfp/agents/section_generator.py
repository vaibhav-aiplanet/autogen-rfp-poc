import json
from pprint import pprint

from autogen_core import MessageContext, RoutedAgent, TopicId, message_handler
from autogen_core.models import SystemMessage, UserMessage
from pydantic import BaseModel

from app.core.llm import get_llm_client
from app.rfp.utils import Topics


class GenerateMessage(BaseModel):
    content: str


class SectionData(BaseModel):
    title: str
    questions: list[str]


class GeneratedMessage(BaseModel):
    sections: list[SectionData]


class SectionGeneratorAgent(RoutedAgent):

    def __init__(self, desc: str):
        super().__init__(desc)

        self.prompt = """
You are an AI assistant tasked with organizing RFP (Request for Proposal) questions extracted from an RFP document.

Your goals are:
1. Identify every question in the text.
2. Check if the text contains section headers (non-question text). If present, use these headers as section titles and assign the subsequent questions to the corresponding section.
3. If no section headers exist, logically divide the questions into at least five (5) groups under coherent and meaningful section titles.
4. Ensure that no question is omitted or altered from the input. Do not invent additional questions.
5. Your final output must be valid JSON with the structure specified below. Do not include any explanations, commentary, or extra text outside the JSON.

Provide your output in valid JSON format as follows:
{{
    "sections": [
        {{
            "title": "Section Title",
            "questions": [
                "Question 1",
                "Question 2",
                "Question 3",
                "Question 4",
                "Question 5",
                ........
                ........
                "Question n"
            ]
        }},
        ... (at least 5 sections)
    ]
}}

***Important***:
1. Make sure to accurately differentiate and identify between section headings and questions
2. If sections are identified in text, group the belonging questions to that section heading ONLY. If sections are not found, make groups of existing question under logical section heading generated by you.
3. Do not alter any questions or add new ones.


Input:
{rfp_content}

"""

        self.llm_client = get_llm_client()

    @message_handler
    async def generate_sections(
        self, message: GenerateMessage, ctx: MessageContext
    ) -> None:
        """
        Handler to generate sections and questions
        """

        print("Generating Sections")

        prompt = self.prompt.format(rfp_content=message.content)
        response = await self.llm_client.create(
            [
                SystemMessage(content=prompt),
                UserMessage(
                    content="Format and categorize RFP questions into logical themed sections. Give output in JSON",
                    source="User",
                ),
            ],
            json_output=True,
        )

        assert isinstance(response.content, str), "LLM Output is not string"

        data = json.loads(response.content)

        assert ctx.topic_id is not None

        topic_id = TopicId(Topics.GENERATED.value, ctx.topic_id.source)
        await self.publish_message(
            GeneratedMessage(sections=data.get("sections")),
            topic_id,
            cancellation_token=ctx.cancellation_token,
        )
        print("Published sections")
